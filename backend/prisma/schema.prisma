// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String    
  username  String   @unique
  password  String
  about     String?
  posts     Post[]
  bookmarks Bookmark[]
  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")
  likes     Like[]
}

model Post {
  id         String  @id @default(uuid())
  title      String
  content    String
  coverImage String?
  published  Boolean @default(false)
  author     User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  bookmarks  Bookmark[] 
  tags       Tag[]
  likes      Like[]
  comments   Comment[]   
}

model Bookmark {
  userId     String
  postId     String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@id([userId, postId]) // Composite primary key for userId and postId
}

model Tag {
  id     String @id @default(uuid())
  name   String @unique
  posts  Post[]
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Ensure unique follow relationships
}

model Like {
  postId  String
  userId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId]) 
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}